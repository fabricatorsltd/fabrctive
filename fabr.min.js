class FabrCore {
  fetchContent(sourceUrl) {
    return fetch(sourceUrl)
      .then((response) => response.text())
      .then((html) => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const sourceElement = doc.querySelector("html");
        return sourceElement.innerHTML;
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }
  fetchJSON(sourceUrl) {
    return fetch(sourceUrl)
      .then((response) => response.json())
      .then((data) => {
        return data;
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }
}
class FabrHelper {
  constructor() {
    this.helperUID = Math.random().toString(36).substr(2, 9);
    this.helperName = "Generic";
    this.component = null;
  }
  init(component) {
    this.component = component;
  }
}
class FabrHelperAnimate extends FabrHelper {
  constructor() {
    super();
    this.helperName = "Animate";
  }
  animate(element, duration, from, to, display, remove = false) {
    element.style.opacity = from;
    element.style.display = display;
    let start = null;
    const step = (timestamp) => {
      if (!start) start = timestamp;
      const progress = timestamp - start;
      const opacity = from + (to - from) * (progress / duration);
      element.style.opacity = opacity;
      if (progress < duration) {
        window.requestAnimationFrame(step);
      } else {
        element.style.opacity = to;
        if (to === 0) {
          element.style.display = "none";
          if (remove) {
            element.remove();
          }
        }
      }
    };
    window.requestAnimationFrame(step);
  }
  fadeIn(element, duration = 400) {
    this.animate(element, duration, 0, 1, "block");
  }
  fadeOut(element, remove = false, duration = 400) {
    this.animate(element, duration, 1, 0, "block", remove);
  }
}
class FabrHelperIcon extends FabrHelper {
  constructor() {
    super();
    this.helperName = "Icon";
    this.iconsLibrary = "";
    this.iconDOMStructure = null;
  }
  setIconsLibraryFontAwesome() {
    this.iconsLibrary = "fontawesome";
    this.iconDOMStructure = document.createElement("i");
    this.iconDOMStructure.classList.add("fas", "fa-{{icon}}");
  }
  setIconsLibraryMaterial() {
    this.iconsLibrary = "material";
    this.iconDOMStructure = document.createElement("i");
    this.iconDOMStructure.classList.add("material-icons");
    this.iconDOMStructure.innerHTML = "{{icon}}";
  }
  setIconsLibraryBootstrap() {
    this.iconsLibrary = "bootstrap";
    this.iconDOMStructure = document.createElement("i");
    this.iconDOMStructure.classList.add("bi", "bi-{{icon}}");
  }
  new(icon) {
    if (this.iconDOMStructure === null) {
      this.setIconsLibraryMaterial();
    }
    const iconElement = this.iconDOMStructure.cloneNode(true);
    iconElement.previousIcon = "{{icon}}";
    iconElement.changeIcon = (icon) => {
      console.log(iconElement.previousIcon);
      iconElement.innerHTML = iconElement.innerHTML.replace(
        iconElement.previousIcon,
        icon
      );
      iconElement.previousIcon = icon;
    };
    iconElement.changeIcon(icon);
    return iconElement;
  }
}
class FabrCoreComponent extends FabrCore {
  constructor() {
    super();
    this.componentUID = Math.random().toString(36).substr(2, 9);
    this.componentName = "Generic";
    this.selector = "";
    this.eventMap = {};
  }
  init() {
    this.initElements();
    this.initEventListeners();
  }
  get repr() {
    return `<${this.componentName}:${this.componentUID}>`;
  }
  get reprX() {
    return [
      `<${this.componentName}:${this.componentUID}>`,
      "background: #6c63ff; color: white; border-radius: 3px; padding: 0 3px; font-weight: bold",
    ];
  }
  initElements() {
    this.elements = document.querySelectorAll(this.selector);
  }
  initEventListeners() {
    if (Object.keys(this.eventMap).length === 0) {
      this.debugger.log(
        `No event listeners defined for ${this.repr}on ${this.selector}`
      );
      return;
    }
    for (let [event, fn] of Object.entries(this.eventMap)) {
      this.elements.forEach((element) => {
        element.addEventListener(event, (e) => {
          this[fn](e);
        });
      });
    }
  }
  addInternalEventListener(element, event, fn, reference = null) {
    element.addEventListener(event, (e) => {
      this[fn](e, reference);
    });
  }
}
class FabrForm extends FabrCoreComponent {
  constructor() {
    super();
    this.componentName = "FabrForm";
    this.selector = "[fabr-form]";
    this.eventMap = { submit: "onSubmit" };
  }
  onSubmit(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const formAction = event.target.action;
    this.submitForm(formAction, formData)
      .then((data) => {
        if (data.status === 200) {
          if (data.redirect) {
            window.location.href = data.redirect;
          } else {
            showToast(data.message, "success", 3000, true);
          }
        } else {
          showToast(data.message, "error", 0, true);
        }
      })
      .catch((error) => console.error("Error:", error));
  }
  submitForm(formAction, formData) {
    return fetch(formAction, { method: "POST", body: formData })
      .then((response) => response.json())
      .then((data) => {
        return data;
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }
}
class FabrLink extends FabrCoreComponent {
  constructor() {
    super();
    this.componentName = "FabrLink";
    this.selector = "[fabr-link]";
    this.eventMap = { click: "onClick" };
  }
  onClick(event) {
    event.preventDefault();
    let source = "";
    let target = event.target.closest("[fabr-link]");
    if (target) {
      source = target.hasAttribute("href")
        ? target.getAttribute("href")
        : target.getAttribute("fabr-link-target");
    }
    const containerId = target ? target.getAttribute("fabr-link-dom") : null;
    const container = containerId
      ? document.getElementById(containerId)
      : document.body;
    this.fetchContent(source)
      .then((html) => {
        container.innerHTML = html;
        const scripts = container.querySelectorAll("script");
        scripts.forEach((script) => {
          if (script.innerText) {
            eval(script.innerText);
          } else {
            fetch(script.src).then((response) => {
              response.text().then((r) => {
                eval(r);
              });
            });
          }
        });
        const title = container.querySelector("title");
        if (title) {
          document.title = title.innerText;
        }
      })
      .then(() => {
        if (!containerId) {
          window.history.pushState(null, "", source);
        }
      })
      .catch((error) => console.error("Error:", error));
  }
  onMouseOver(event) {
    console.log("Mouse Over on:", event.target);
  }
}
class FabrCounter extends FabrCoreComponent {
  constructor() {
    super();
    this.componentName = "FabrCounter";
    this.selector = "[fabr-counter]";
    this.eventMap = { click: "onClick" };
    this.counters = {};
  }
  onClick(event) {
    event.preventDefault();
    const target = event.target.closest("[fabr-counter]");
    if (target) {
      const counterId = target.getAttribute("fabr-counter");
      const counter = this.counters[counterId];
      if (counter) {
        counter.value++;
        target.innerText = counter.value;
      } else {
        const initialValue =
          parseInt(target.getAttribute("fabr-counter-initial-value")) || 0;
        this.counters[counterId] = { value: initialValue + 1 };
        target.innerText = this.counters[counterId].value;
      }
    }
  }
}
class FabrTooltip extends FabrCoreComponent {
  constructor() {
    super();
    this.componentName = "FabrTooltip";
    this.selector = "[fabr-tooltip]";
    this.eventMap = { mouseenter: "showTooltip", mouseleave: "removeTooltips" };
    this.animateHelper = new FabrHelperAnimate();
    this.animateHelper.init(this);
  }
  showTooltip(event) {
    const target = event.target.closest("[fabr-tooltip]");
    if (target) {
      const tooltipId = target.getAttribute("fabr-tooltip");
      const tooltip = document.createElement("div");
      tooltip.setAttribute("id", tooltipId);
      tooltip.setAttribute("class", "tooltip");
      tooltip.innerText = target.getAttribute("fabr-tooltip-text");
      document.body.appendChild(tooltip);
      this.animateHelper.fadeIn(tooltip);
    }
  }
  removeTooltips(event) {
    const tooltips = document.querySelectorAll(".tooltip");
    tooltips.forEach((tooltip) => {
      this.animateHelper.fadeOut(tooltip, true);
    });
  }
}
class FabrNotebook extends FabrCoreComponent {
  constructor() {
    super();
    this.componentName = "FabrNotebook";
    this.selector = "[fabr-notebook]";
    this.eventMap = { click: "onClick" };
    this.tabs = {};
    this.animateHelper = new FabrHelperAnimate();
    this.animateHelper.init(this);
  }
  init() {
    super.init();
    this.render();
  }
  render() {
    const tabs = document.querySelector(this.selector);
    const tabItems = tabs.querySelectorAll("[fabr-notebook-item]");
    tabItems.forEach((tabItem) => {
      const tabId = tabItem.getAttribute("fabr-notebook-item");
      const tabContent = document.querySelector(
        `[fabr-notebook-content="${tabId}"]`
      );
      tabContent.style.display = "none";
      if (tabContent) {
        this.tabs[tabId] = { tabItem, tabContent };
      }
    });
    this.activateTab(Object.keys(this.tabs)[0]);
  }
  onClick(event) {
    event.preventDefault();
    const target = event.target.closest("[fabr-notebook-item]");
    if (target) {
      const tabId = target.getAttribute("fabr-notebook-item");
      this.activateTab(tabId);
    }
  }
  activateTab(tabId) {
    Object.keys(this.tabs).forEach((key) => {
      const tab = this.tabs[key];
      if (key === tabId) {
        tab.tabItem.classList.add("active");
        this.animateHelper.fadeIn(tab.tabContent);
      } else {
        tab.tabItem.classList.remove("active");
        tab.tabContent.style.display = "none";
      }
    });
  }
}
class FabrTable extends FabrCoreComponent {
  constructor() {
    super();
    this.componentName = "Table";
    this.selector = "[fabr-table]";
    this.eventMap = {};
    this.tables = [];
    this.iconHelper = new FabrHelperIcon();
    this.iconHelper.init(this);
    this.iconHelper.setIconsLibraryMaterial();
  }
  init() {
    super.init();
    this.render();
  }
  render() {
    this.elements.forEach((table) => {
      this.tables.push({
        element: table,
        options: table.getAttribute("fabr-table-options").split("|"),
        activeElement: null,
      });
    });
    this.tables.forEach((table) => {
      this.renderTable(table);
    });
  }
  renderTable(table) {
    const wrapper = document.createElement("div");
    wrapper.classList.add("fabr-table-wrapper");
    table.element.parentNode.insertBefore(wrapper, table.element);
    wrapper.appendChild(table.element);
    table.activeElement = wrapper;
    if (table.options.includes("search")) {
      this.renderSearch(table);
    }
    if (table.options.includes("sort")) {
      this.renderSort(table);
    }
  }
  renderSearch(table) {
    const search = document.createElement("input");
    search.setAttribute("type", "text");
    search.setAttribute("placeholder", "Search...");
    search.setAttribute("fabr-table-search", "");
    table.activeElement.insertBefore(search, table.element);
    this.addInternalEventListener(search, "keyup", "onKeyup", table);
  }
  renderSort(table) {
    const ths = table.element.querySelectorAll("th");
    ths.forEach((th) => {
      const icon = this.iconHelper.new("unfold_more");
      th.sortIcon = icon;
      th.appendChild(icon);
      this.addInternalEventListener(th, "click", "onClick", table);
      th.setAttribute("fabr-table-sort", "");
    });
  }
  sortTable(th, table) {
    const isAsc = th.getAttribute("fabr-table-sort") === "asc";
    const ths = table.element.querySelectorAll("[fabr-table-sort]");
    ths.forEach((th) => {
      th.sortIcon.changeIcon("unfold_more");
      th.setAttribute("fabr-table-sort", "");
    });
    const tbody = table.element.querySelector("tbody");
    const rows = tbody.querySelectorAll("tr");
    const index = th.cellIndex;
    const sortedRows = Array.from(rows).sort((rowA, rowB) => {
      const cellA = rowA.cells[index].textContent;
      const cellB = rowB.cells[index].textContent;
      return isAsc ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
    });
    th.setAttribute("fabr-table-sort", isAsc ? "desc" : "asc");
    th.sortIcon.changeIcon(isAsc ? "keyboard_arrow_down" : "keyboard_arrow_up");
    while (tbody.firstChild) {
      tbody.removeChild(tbody.firstChild);
    }
    tbody.append(...sortedRows);
  }
  onClick(event, table) {
    const target = event.target.closest("[fabr-table-sort]");
    if (target) {
      this.sortTable(target, table);
    }
  }
  onKeyup(event, table) {
    const target = event.target.closest("[fabr-table-search]");
    if (target) {
      this.searchTable(target, table);
    }
  }
  searchTable(input, table) {
    const value = input.value.toLowerCase();
    const rows = table.element.querySelectorAll("tbody tr");
    rows.forEach((row) => {
      const text = row.textContent.toLowerCase();
      if (text.includes(value)) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    });
  }
}
class Reactive extends FabrCore {
  constructor() {
    super();
    console.log("Reactive initializing");
    this.init();
    console.log("Reactive initialized");
  }
  init() {
    this.initForms();
    this.initLinks();
    this.initCounters();
    this.initTooltips();
    this.initNotebooks();
    this.initTables();
  }
  initForms() {
    const forms = new FabrForm();
    forms.init();
  }
  initLinks() {
    const links = new FabrLink();
    links.init();
  }
  initCounters() {
    const counters = new FabrCounter();
    counters.init();
  }
  initTooltips() {
    const tooltips = new FabrTooltip();
    tooltips.init();
  }
  initNotebooks() {
    const notebooks = new FabrNotebook();
    notebooks.init();
  }
  initTables() {
    const tables = new FabrTable();
    tables.init();
  }
}
